// Code generated by MockGen. DO NOT EDIT.
// Source: workshop2/services (interfaces: NotificationRepositoryInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	models "workshop2/models"

	gomock "github.com/golang/mock/gomock"
)

// MockNotificationRepositoryInterface is a mock of NotificationRepositoryInterface interface.
type MockNotificationRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationRepositoryInterfaceMockRecorder
}

// MockNotificationRepositoryInterfaceMockRecorder is the mock recorder for MockNotificationRepositoryInterface.
type MockNotificationRepositoryInterfaceMockRecorder struct {
	mock *MockNotificationRepositoryInterface
}

// NewMockNotificationRepositoryInterface creates a new mock instance.
func NewMockNotificationRepositoryInterface(ctrl *gomock.Controller) *MockNotificationRepositoryInterface {
	mock := &MockNotificationRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockNotificationRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationRepositoryInterface) EXPECT() *MockNotificationRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockNotificationRepositoryInterface) Create(arg0 models.Notification) (models.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(models.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockNotificationRepositoryInterfaceMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNotificationRepositoryInterface)(nil).Create), arg0)
}

// GetAll mocks base method.
func (m *MockNotificationRepositoryInterface) GetAll() ([]models.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]models.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockNotificationRepositoryInterfaceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockNotificationRepositoryInterface)(nil).GetAll))
}

// Update mocks base method.
func (m *MockNotificationRepositoryInterface) Update(arg0 int, arg1 models.Notification) (models.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(models.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockNotificationRepositoryInterfaceMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNotificationRepositoryInterface)(nil).Update), arg0, arg1)
}
